import re

patterns = ['term1', 'term2']
text = "This is a string with term1, but not the other term"

# small sample
match = re.search('Hello', 'Hello world!')
print(match)
# Match object
# <re.Match object; span=(0, 5), match='Hello'>

# None is returned if is there no match

for pattern in patterns:
    print('Searching for "%s" in:\n "%s"\n' % (pattern, text))

    # Check for match
    if re.search(pattern, text):
        print('Match was found. \n')
    else:
        print('No Match was found.\n')

# Searching for "term1" in:
#  "This is a string with term1, but not the other term"
#
# Match was found.
#
# Searching for "term2" in:
#  "This is a string with term1, but not the other term"
#
# No Match was found.

match = re.search(patterns[0], text)

print(match.start())
# 22

print(match.end())
# 27

# Split regular expressions

split_term = "@"
phrase = "What is your email, is it hello@email.com?"

result = re.split(split_term, phrase)
print(result)
# ['What is your email, is it hello', 'email.com?']


result = re.findall('match', 'Here is one match, here is another match')
print(result)


# ['match', 'match']


# Repetition syntax

def multi_re_find(patterns, phrase):
    '''
    Takes in a list of regex patterns
    Prints a list of all matches
    '''
    for pattern in patterns:
        print('Searching the phrase using the re check: %r' % (pattern))
        print(re.findall(pattern, phrase))
        print('\n')


test_phrase = 'sdsd..sssddd...sdddsddd...dsds...dsssss...sdddd'

test_patterns = ['sd*',  # s followed by zero or more d's
                 'sd+',  # s followed by one or more d's
                 'sd?',  # s followed by zero or one d's
                 'sd{3}',  # s followed by three d's
                 'sd{2,3}',  # s followed by two to three d's
                 ]

multi_re_find(test_patterns, test_phrase)

# Searching the phrase using the re check: 'sd*'
# ['sd', 'sd', 's', 's', 'sddd', 'sddd', 'sddd', 'sd', 's', 's', 's', 's', 's', 's', 'sdddd']
#
#
# Searching the phrase using the re check: 'sd+'
# ['sd', 'sd', 'sddd', 'sddd', 'sddd', 'sd', 'sdddd']
#
#
# Searching the phrase using the re check: 'sd?'
# ['sd', 'sd', 's', 's', 'sd', 'sd', 'sd', 'sd', 's', 's', 's', 's', 's', 's', 'sd']
#
#
# Searching the phrase using the re check: 'sd{3}'
# ['sddd', 'sddd', 'sddd', 'sddd']
#
#
# Searching the phrase using the re check: 'sd{2,3}'
# ['sddd', 'sddd', 'sddd', 'sddd']


# Character Sets

test_phrase = 'sdsd..sssddd...sdddsddd...dsds...dsssss...sdddd'

test_patterns = ['[sd]',  # either s or d
                 's[sd]+']  # s followed by one or more s or d

multi_re_find(test_patterns, test_phrase)

# Searching the phrase using the re check: '[sd]'
# ['s', 'd', 's', 'd', 's', 's', 's', 'd', 'd', 'd', 's', 'd', 'd', 'd', 's', 'd', 'd', 'd', 'd', 's', 'd', 's', 'd', 's', 's', 's', 's', 's', 's', 'd', 'd', 'd', 'd']
#
#
# Searching the phrase using the re check: 's[sd]+'
# ['sdsd', 'sssddd', 'sdddsddd', 'sds', 'sssss', 'sdddd']


# Exclusion

test_phrase = 'This is a string! But it has punctuation. How can we remove it?'
result = re.findall('[^!.? ]+', test_phrase)

print(result)
# ['This', 'is', 'a', 'string', 'But', 'it', 'has', 'punctuation', 'How', 'can', 'we', 'remove', 'it']


# Character Ranges

test_phrase = 'This is an example sentence. Lets see if we can find some letters.'

test_patterns = ['[a-z]+',  # sequences of lower case letters
                 '[A-Z]+',  # sequences of upper case letters
                 '[a-zA-Z]+',  # sequences of lower or upper case letters
                 '[A-Z][a-z]+']  # one upper case letter followed by lower case letters

multi_re_find(test_patterns, test_phrase)

# Searching the phrase using the re check: '[a-z]+'
# ['his', 'is', 'an', 'example', 'sentence', 'ets', 'see', 'if', 'we', 'can', 'find', 'some', 'letters']
#
#
# Searching the phrase using the re check: '[A-Z]+'
# ['T', 'L']
#
#
# Searching the phrase using the re check: '[a-zA-Z]+'
# ['This', 'is', 'an', 'example', 'sentence', 'Lets', 'see', 'if', 'we', 'can', 'find', 'some', 'letters']
#
#
# Searching the phrase using the re check: '[A-Z][a-z]+'
# ['This', 'Lets']


# Escape Codes

# Code      Meaning
# \d	    a digit
# \D	    a non-digit
# \s	    whitespace (tab, space, newline, etc.)
# \S	    non-whitespace
# \w	    alphanumeric
# \W	    non-alphanumeric

test_phrase = 'This is a string with some numbers 1233 and a symbol #hashtag'

test_patterns=[ r'\d+', # sequence of digits
                r'\D+', # sequence of non-digits
                r'\s+', # sequence of whitespace
                r'\S+', # sequence of non-whitespace
                r'\w+', # alphanumeric characters
                r'\W+', # non-alphanumeric
                ]

multi_re_find(test_patterns,test_phrase)

# Searching the phrase using the re check: '\\d+'
# ['1233']
#
#
# Searching the phrase using the re check: '\\D+'
# ['This is a string with some numbers ', ' and a symbol #hashtag']
#
#
# Searching the phrase using the re check: '\\s+'
# [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
#
#
# Searching the phrase using the re check: '\\S+'
# ['This', 'is', 'a', 'string', 'with', 'some', 'numbers', '1233', 'and', 'a', 'symbol', '#hashtag']
#
#
# Searching the phrase using the re check: '\\w+'
# ['This', 'is', 'a', 'string', 'with', 'some', 'numbers', '1233', 'and', 'a', 'symbol', 'hashtag']
#
#
# Searching the phrase using the re check: '\\W+'
# [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' #']
